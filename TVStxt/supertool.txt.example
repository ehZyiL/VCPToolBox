四.文件管理
1.文件搜索，基于Everything模块实现。
tool_name:「始」LocalSearchController「末」, // 注意，如果使用工具名ServerSearchController则代表操作服务器文件！
command:「始」search「末」,
query:「始」VCP a.txt「末」, //语法和Everything一致，支持高级语法，支持多tag混合搜索。
maxResults:「始」50「末」

2.文件管理器。可以管理用户本地指定文件区域，也可以阅读全局文件。支持富文本格式读取。
tool_name:「始」FileOperator「末」,   // 注意，如果使用工具名ServerFileOperator则代表操作服务器文件！
①查看工作目录下所有文件列表。
command:「始」ListAllowedDirectories「末」
②阅读文件，支持阅读电脑里任何区域文件，支持阅读多媒体文件，word/pdf文档等等富格式文件。
command:「始」ReadFile「末」,
filePath:「始」/path/to/your/document.pdf「末」
③写入文件（同名自动重命名）
command:「始」WriteFile「末」,
filePath:「始」/path/to/your/file.txt「末」,
content:「始」这是要写入的新内容。
这是第二行。「末」
④追加文件内容。
command:「始」AppendFile「末」,
filePath:「始」/path/to/your/log.txt「末」,
content:「始」
在文件末尾追加内容「末」
⑤编辑文件，编辑后会完全覆盖已有内容
command:「始」EditFile「末」,
filePath:「始」/path/to/existing_file.txt「末」,
content:「始」这是覆盖后的新内容。「末」
⑥List指定目录
command:「始」ListDirectory「末」,
directoryPath:「始」/path/to/directory「末」,
showHidden:「始」false「末」 //是否返回隐藏文件
⑦查询文件元数据（如大小、创建时间、修改时间、是否是目录等）
command:「始」FileInfo「末」,
filePath:「始」/path/to/your/file.txt「末」
⑧复制文件
command:「始」CopyFile「末」,
sourcePath:「始」/path/to/source.txt「末」,
destinationPath:「始」/path/to/destination.txt「末」
⑨移动文件
command:「始」MoveFile「末」,
sourcePath:「始」/path/to/source.txt「末」,
destinationPath:「始」/path/to/new_directory/source.txt「末」
⑩重命名文件
command:「始」RenameFile「末」,
sourcePath:「始」/path/to/old_name.txt「末」,
destinationPath:「始」/path/to/new_name.txt「末」
11.删除文件
command:「始」DeleteFile「末」,
filePath:「始」/path/to/deletable_file.txt「末」
12.创建文件夹
command:「始」CreateDirectory「末」,
directoryPath:「始」/path/to/new_folder/sub_folder「末」
13.差分化编辑文件，适合对文件内进行部分修改
command:「始」ApplyDiff「末」,
filePath:「始」/path/to/your/file.txt「末」,
searchString:「始」旧内容「末」,
replaceString:「始」新内容「末」
14.阅读网络文件
command:「始」WebReadFile「末」,
url:「始」https://example.com/sample.jpg「末」
15.下载文件
command:「始」DownloadFile「末」,
url:「始」http://example.com/archive.zip「末」
16.聊天历史编辑器。安全可靠的编辑.json格式的聊天历史文件，有健全的兜底机制避免json文件被损毁。
command:「始」UpdateHistory「末」,
filePath:「始」H:\path\to\your\history.json「末」,
searchString:「始」这是我想修改的旧内容。「末」,
replaceString:「始」这是替换后的新内容。「末」,
archery:「始」no_reply「末」  // 可选，更新上下文不需要工具回执。

17.构建批量指令——FileOperator支持批量指令例如：
<<<[TOOL_REQUEST]>>>
tool_name:「始」FileOperator「末」,
command1:「始」RenameFile「末」,
sourcePath1:「始」/path/to/old_name.txt「末」,
destinationPath1:「始」/path/to/new_name.txt「末」
command2:「始」RenameFile「末」,
sourcePath2:「始」/path/to/old_name.txt「末」,
destinationPath2:「始」/path/to/new_name.txt「末」
command3:「始」EditFile「末」,
filePath3:「始」/path/to/existing_file.txt「末」,
content3:「始」这是覆盖后的新内容。「末」
<<<[END_TOOL_REQUEST]>>>
通过这种方式可以构建多组指令。


18.创建Canvas协同编辑器
command:「始」CreateCanvas「末」,
fileName:「始」new_canvas.js「末」,
content:「始」console.log('Hello, Canvas!');「末」
这是一个非常强大的指令，它将创建一个即时的IDE/文档编译窗口，允许你和用户共同编辑内部内容。该窗口拥有强大的渲染器和编译器，非常适合向用户展示代码或者大型文案，并且邀请用户一同编辑它。灵活使用之前的各类文件编辑工具来和用户一起编辑canvas内容吧。

19.[重要]如何创建“内部内容有「始」，「末」”的文件！使用转义文件创造插件，它会自动将文本内的「始exp」，「末exp」，<<<[TOOL_REQUEST_EXP]>>>，<<<[END_TOOL_REQUEST_EXP]>>>进行替换，从而安全创造包含始末的文件。
tool_name:「始」FileOperator「末」,
command:「始」WriteEscapedFile「末」,
filePath:「始」/path/to/new_plugin/plugin-manifest.json「末」,
content:「始」{
  "description": "...调用格式:\n<<<[TOOL_REQUEST_EXP]>>>\ntool_name:「始exp」MyNewPlugin「末exp」,\n...\n<<<[END_TOOL_REQUEST_EXP]>>>"
}「末」

[重要提示：事实上，在你向用户演示指令，而非真正调用工具的时候，也应该遵守exp转义原则！]

20.PowerShell 命令行工具。前端版本拥有独立的GUI终端界面(VCP-CLI)(可以连续执行多个指令)，后端服务器版本为无窗口的命令行（执行完任务后会关闭命令行实例）
直接调用并获取运行结果。当后端想要实现连续指令时，必须使用标准串语法（每个串指令队列运行结束后仍会重置窗口）。
tool_name:「始」PowerShellExecutor「末」, //若使用 ServerPowerShellExecutor 则代表运行VCP主服务器内的后端版本命令行工具
command:「始」Get-ChildItem「末」,
executionType:「始」blocking/background「末」, //（可选）默认blocking无需选择。选择background为后台执行，你不会看到调用结果，用于长时任务。
command:「始」Start-Sleep -Seconds 60; Write-Host 'Task Completed'「末」,
newSession:「始」true「末」, //（可选）仅限于前端版本，代表新建一个窗口并清理旧的窗口。
requireAdmin:「始」true「末」 //该参数调用后需要用户确认授权，将启用管理员权限运行指令。当调用ServerPowerShellExecutor版本的时候，该字段需要输入6位数安全码而非true才能被调用。
当用户在VCP CLI里输入了指令的时候，你可以用Get-History来了解用户输入的内容。

21.代码检索器。
调用此工具在VCP项目源码中搜索指定的代码片段或关键词。支持使用正则表达式进行高级搜索。通过这个插件更快理解VCP服务器工作原理！
参数:
- query (字符串, 必需): 需要搜索的关键词、代码片段或正则表达式。
- search_path (字符串, 可选): 指定要搜索的相对路径。如果未提供，则默认为整个项目的工作区。
- case_sensitive (布尔值, 可选, 默认false): 是否区分大小写搜索。
- whole_word (布尔值, 可选, 默认false): 是否进行全词匹配。
- context_lines (整数, 可选, 默认2): 返回结果时，在匹配行前后额外显示的上下文行数。
tool_name:「始」CodeSearcher「末」,   //使用ServerCodeSearcher则代表搜索后端代码，否则则为前端代码
query:「始」关键词或正则表达式「末」,
search_path:「始」(可选)相对路径「末」,
case_sensitive:「始」(可选)true/false「末」,
whole_word:「始」(可选)true/false「末」,
context_lines:「始」(可选)数字「末」



22. JinaAI 搜索与阅读工具
🌐 网页内容提取 (Reader/read_url) - 智能提取网页内容，支持截图和高级选择器：
基础调用：
tool_name:「始」JinaAI「末」,
command:「始」read_url「末」, // 或 "reader" (别名)
url:「始」(必需) 要提取内容的网页URL「末」,
format:「始」(可选) 输出格式，默认"default"「末」,
  • "default": 默认优化格式
  • "markdown": Markdown格式文本
  • "html": HTML格式文本
  • "text": 纯文本格式
  • "screenshot": 首屏截图
  • "pageshot": 全页截图（推荐用于截图）

高级参数：
targetSelector:「始」(可选) 提取特定CSS选择器内容，如 ".content"，别名: selector「末」,
removeSelector:「始」(可选) 移除特定元素，如 "nav, footer, .ads"「末」,
waitForSelector:「始」(可选) 等待特定元素加载完成「末」,
withLinksSummary:「始」(可选) 生成链接摘要，别名: gatherLinks「末」,
withImagesSummary:「始」(可选) 生成图片摘要，别名: gatherImages「末」,
withGeneratedAlt:「始」(可选) 生成图片alt描述，别名: imageCaption「末」,
withIframe:「始」(可选) 处理iframe内容，别名: enableIframe「末」,
withShadowDom:「始」(可选) 处理Shadow DOM，别名: enableShadowDom「末」,
tokenBudget:「始」(可选) Token预算限制「末」,
timeout:「始」(可选) 超时时间(秒)「末」,
noCache:「始」(可选) 禁用缓存，别名: no_cache「末」,
browserLocale:「始」(可选) 浏览器语言，别名: locale「末」

🔍 网络搜索 (Search) - 智能网络搜索，支持高级搜索操作符和过滤：
基础调用：
tool_name:「始」JinaAI「末」,
command:「始」search「末」,
query:「始」(必需) 搜索查询词，别名: q/keyword「末」,
format:「始」(可选) 输出格式，默认"default"「末」,
  • "default": 默认JSON格式
  • "screenshot": 搜索结果页截图
  • "pageshot": 全页截图

搜索过滤参数：
site:「始」(可选) 限制搜索域名，如 "github.com"「末」,
filetype:「始」(可选) 文件类型过滤，如 "pdf,doc"「末」,
ext:「始」(可选) 文件扩展名过滤「末」,
intitle:「始」(可选) 标题包含关键词「末」,
loc:「始」(可选) 地理位置过滤「末」,
gl:「始」(可选) 国家代码，如 "us", "cn"「末」,
page:「始」(可选) 分页偏移量「末」,

高级参数：
withFavicons:「始」(可选) 包含网站图标「末」,
engine:「始」(可选) 搜索引擎选择「末」,
browserLocale:「始」(可选) 浏览器语言，别名: locale「末」,
tokenBudget:「始」(可选) Token预算限制「末」,
timeout:「始」(可选) 超时时间(秒)「末」,
noCache:「始」(可选) 禁用缓存，别名: no_cache「末」

✅ 事实验证 (Grounding/ground_statement) - 基于权威来源验证事实陈述：
基础调用：
tool_name:「始」JinaAI「末」,
command:「始」ground_statement「末」, // 或 "factcheck" (别名)
statement:「始」(必需) 需要验证的事实陈述，别名: claim/fact/text「末」,

高级参数：
references:「始」(可选) 指定参考来源，别名: refs「末」,
noCache:「始」(可选) 禁用缓存，别名: no_cache「末」

🔄 批量串行调用：
基本语法：使用数字后缀区分不同命令和参数
tool_name:「始」JinaAI「末」,
command1:「始」第一个操作「末」,
参数名1:「始」第一个操作的参数「末」,
command2:「始」第二个操作「末」,
参数名2:「始」第二个操作的参数「末」,
command3:「始」第三个操作「末」,
参数名3:「始」第三个操作的参数「末」

📋 实用工作流示例：

🔬 研究工作流（搜索+提取+验证）：
tool_name:「始」JinaAI「末」,
command1:「始」search「末」,
query1:「始」人工智能发展历史「末」,
site1:「始」wikipedia.org「末」,
command2:「始」read_url「末」,
url2:「始」https://en.wikipedia.org/wiki/AI「末」,
format2:「始」markdown「末」,
targetSelector2:「始」.mw-parser-output「末」,
command3:「始」ground_statement「末」,
statement3:「始」人工智能概念首次提出于1956年达特茅斯会议「末」

📊 多源内容对比：
tool_name:「始」JinaAI「末」,
command1:「始」read_url「末」,
url1:「始」https://site1.com/article「末」,
targetSelector1:「始」.content「末」,
removeSelector1:「始」nav,footer「末」,
command2:「始」read_url「末」,
url2:「始」https://site2.com/article「末」,
targetSelector2:「始」.main「末」,
removeSelector2:「始」.sidebar「末」

📸 截图+内容提取组合：
tool_name:「始」JinaAI「末」,
command1:「始」read_url「末」,
url1:「始」https://example.com「末」,
format1:「始」pageshot「末」,
command2:「始」read_url「末」,
url2:「始」https://example.com「末」,
format2:「始」markdown「末」,
removeSelector2:「始」nav,footer,.ads「末」,
withLinksSummary2:「始」true「末」

🔍 深度搜索分析：
tool_name:「始」JinaAI「末」,
command1:「始」search「末」,
query1:「始」机器学习算法比较「末」,
site1:「始」arxiv.org「末」,
filetype1:「始」pdf「末」,
command2:「始」search「末」,
query2:「始」machine learning algorithms comparison「末」,
site2:「始」github.com「末」,
command3:「始」search「末」,
query3:「始」机器学习实战案例「末」,
site3:「始」medium.com「末」



